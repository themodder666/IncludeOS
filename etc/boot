#!/usr/bin/env python

import os
import sys
import argparse
import subprocess

INCLUDEOS_PREFIX = None
default_prefix = "/usr/local"

# Locate IncludeOS installation
if "INCLUDEOS_PREFIX" not in os.environ:
    INCLUDEOS_PREFIX = default_prefix
else:
    INCLUDEOS_PREFIX = os.environ['INCLUDEOS_PREFIX']

if not os.path.isdir(INCLUDEOS_PREFIX + "/includeos"):
    print "Couldn't find IncludeOS installation. If you installed to a non-default location (e.g. not " + default_loc + ") please set the environment variable INCLUDEOS_PREFIX to point to this location."
    sys.exit(0)

# Argparse
parser = argparse.ArgumentParser(
  description="IncludeOS vmrunner. Builds and runs an IncludeOS service")

parser.add_argument("-c", "--clean", dest="clean", action="store_true",
                    help="Clean previous build before building")

parser.add_argument("-b", "--build", dest="build", action="store_true", default=False,
                    help="Only build the service, don't start it in a VM")

parser.add_argument("-v", "--verbose", dest="verbose", action="store_true", default=False,
                    help="Verbose output when building")

parser.add_argument("--create-bridge", dest="bridge", action="store_true",
                    help="Create bridge43, used in local testing when TAP devices are supported")

parser.add_argument("-g", "--grub", dest="grub", action="store_true",
                    help="Create image with GRUB bootloader that will boot provided binary")

parser.add_argument('binary', action="store", type=str,
                    help="Filename of the IncludeOS service binary")

parser.add_argument('vmargs', nargs='*', help="Arguments to pass on to the VM start / main")
args = parser.parse_args()

# Location of vmrunner
sys.path.append(INCLUDEOS_PREFIX + "/includeos")

from vmrunner.prettify import color

# Override VM output prepension
color.VM_PREPEND = ""

# Pretty printing from this command
nametag = "<boot>"
INFO = color.INFO(nametag)

# We can boot either a binary without bootloader, or an image with bootloader allready attached
has_bootloader = False

print INFO , "Args to pass to VM: ", args.vmargs
# path w/name of VM image to run
image_name = args.binary

# if the binary argument is a directory, go there immediately and
# then initialize stuff ...
if (os.path.isdir(args.binary)):
    image_name = os.path.abspath(args.binary)
    print "Changing directory to: " + image_name
    os.chdir(os.path.abspath(args.binary))

# in verbose mode we will just set VERBOSE=1 for this environment
if (args.verbose):
    os.environ['VERBOSE'] = "1"

# Note: importing vmrunner will make it start looking for VM's
from vmrunner import vmrunner
if len(vmrunner.vms) < 1:
    print color.FAIL("No vm description files found - nothing to boot")
    exit(-1)

print color.INFO(nametag), len(vmrunner.vms), "VM initialized. Commencing build- and boot..."

vm = vmrunner.vms[0]

# For multible JSON configs, find the one matching the provided image name
for vm_ in vmrunner.vms:
    if vm_._config.has_key("image") and vm_._config["image"].startswith(image_name):
        vm = vm_

if (args.clean):
    print INFO, "Cleaning build"
    vm.clean()

if (args.bridge):
    print INFO, "Creating bridge"
    subprocess.call(INCLUDEOS_PREFIX + "/includeos/scripts/create_bridge.sh", shell=True)

# If the binary name is a folder, such as ".", build the service
if (os.path.isdir(image_name)):
    vm.cmake()
    # also, set image name to 
    image_name = open("binary.txt", 'r').read()
# If the binary name has an extension (e.g. a '.'), assume it has a bootloader attached
# NOTE: the idea is to support e.g. .vdi and virtualbox etc. in the future
elif ("." in args.binary):
    has_bootloader = True

if (args.grub):
  print INFO, "Creating GRUB image from ", args.binary
  subprocess.call(INCLUDEOS_PREFIX + "/includeos/scripts/grubify.sh " + image_name, shell=True)
  image_name = image_name + ".grub.img"
  has_bootloader = True

# Skip starting a VM if we are only building
if (args.build): exit(0);

if (not has_bootloader):
    vm.boot(timeout = None, kernel_args=" ".join(args.vmargs), image_name = image_name)
else:
    vm.boot(timeout = None, multiboot = False, kernel_args = None, image_name = image_name)
